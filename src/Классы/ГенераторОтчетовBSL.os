#Использовать fs

#Область ОписаниеПеременных

// Содержит формируемый отчет в формате BSL LS
Перем Отчет;

// Переменная для логирования
Перем Лог;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Создает новое пустое замечание для файла и пополняет коллекци замечаний. 
//
// Параметры:
//   Путь - Строка - Путь к bsl файлу для регистрации нового замечания
//
//  Возвращаемое значение:
//   Структура - Все поля описаны в файле diagnostic.json
//
Функция НовыйЗамечаниеДляОбъекта(Путь) Экспорт

	// СырыеДанныеСтрокой() - промежуточный слой для хранения замечаний. Ключ для регистрации - имя файла.
	РазделЗамечанияДляФайла = Отчет[СырыеДанныеСтрокой()].Получить(Путь);
	
	Если РазделЗамечанияДляФайла = Неопределено Тогда

		Отчет[СырыеДанныеСтрокой()].Вставить(Путь, Новый Структура("diagnostics", Новый Массив));

	КонецЕсли;

	Замечание = Замечание();

	Отчет[СырыеДанныеСтрокой()][Путь].diagnostics.Добавить(Замечание);

	Возврат Замечание;

КонецФункции

// Записывает отчет в файл, если путь не передан, отчет запишется в текущий каталог запуска
//
// Параметры:
//   Путь - Строка - Путь к файлу, куда будет записан отчет в формате BSL LS
//
Процедура ЗаписатьОтчет(Путь = Неопределено) Экспорт

	Если Путь = Неопределено Тогда
		Путь = ОбъединитьПути(ТекущийКаталог(), "edt-bsl-report.json");
	КонецЕсли;

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ОткрытьФайл(Путь, "UTF-8", , Новый ПараметрыЗаписиJSON(, Символы.Таб));
	
	ИзменитьСтруктуруОтчета();

	ЗаписатьJSON(ЗаписьJSON, Отчет);
	ЗаписьJSON.Закрыть();

	Лог.Информация("Записан файл %1", Путь);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИзменитьСтруктуруОтчета()

	Для Каждого ОбъектЗамечаний Из Отчет[СырыеДанныеСтрокой()] Цикл
		
		Замечание = Новый Соответствие;
		Замечание.Вставить("path", ОбъектЗамечаний.Ключ);
		Замечание.Вставить("diagnostics", ОбъектЗамечаний.Значение.diagnostics);
		Отчет["fileinfos"].Добавить(Замечание);

	КонецЦикла;

	Отчет.Удалить(СырыеДанныеСтрокой());

КонецПроцедуры

Функция СырыеДанныеСтрокой()

	Возврат "fileinfos_dirty";

КонецФункции

Функция ПрочитатьОбъект(ПутьКФайлу, ВСоответствие = Истина)

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ПутьКФайлу, "UTF-8");

	Объект = ПрочитатьJSON(ЧтениеJSON, ВСоответствие);
	ЧтениеJSON.Закрыть();

	Возврат Объект;

КонецФункции

Функция ШаблонОтчет()

	Возврат ОбъединитьПути(ТекущийСценарий().Каталог, "..", Ресурсы(), "report.json");

КонецФункции

Функция ШаблонЗамечания()

	Возврат ОбъединитьПути(ТекущийСценарий().Каталог, "..", Ресурсы(), "diagnostic.json");

КонецФункции

Функция Ресурсы()

	Возврат "Ресурсы";

КонецФункции

Функция Замечание()

	Возврат ПрочитатьОбъект(ШаблонЗамечания(), Ложь);

КонецФункции

Процедура ПриСозданииОбъекта()

	Отчет = ПрочитатьОбъект(ШаблонОтчет());

	Отчет["date"] = Формат(ТекущаяУниверсальнаяДата(), "ДФ='yyyy-MM-dd HH:mm:ss'");
	
КонецПроцедуры

#КонецОбласти

Лог = ПараметрыПриложения.Лог();
