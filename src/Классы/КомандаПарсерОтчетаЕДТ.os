Перем Лог; // Переменная для хранения логов

Процедура ОписаниеКоманды(Знач КомандаПриложения) Экспорт
	
	КомандаПриложения.Опция("nixPath", Истина, "Использовать пути как в линукс системах")
		.ТБулево()
		.ВОкружении("EDT_RIPPER_USE_UNIX_PATHS");

	КомандаПриложения.Аргумент("PATH", "", "Файл с отчетом")
		.ТСтрока();

	КомандаПриложения.Аргумент("WORKDIR", "", "Корень репозитория или проектной области")
		.ТСтрока();

	КомандаПриложения.Аргумент("PROJECTS", Новый Массив, "Список проектов, которые были переданы в ЕДТ для анализа")
		.ТМассивСтрок();

	КомандаПриложения.Аргумент("OUT", "", "Путь к файлу отчета в формате BSL LS")
		.ТСтрока();

КонецПроцедуры

Процедура ПередВыполнениемКоманды(Знач Команда) Экспорт

	Лог = ПараметрыПриложения.Лог();
	БылиОшибки = Ложь;

	ФайлДляОбработки = Новый Файл(Команда.ЗначениеАргумента("PATH"));

	Если НЕ (ФайлДляОбработки.Существует() И ФайлДляОбработки.ЭтоФайл()) Тогда
		Лог.Ошибка("Не найден файл %1", Команда.ЗначениеАргумента("PATH"));
		БылиОшибки = Истина;
	КонецЕсли;

	Репозиторий = Новый Файл(Команда.ЗначениеАргумента("WORKDIR"));

	Если НЕ (Репозиторий.Существует() И Репозиторий.ЭтоКаталог()) Тогда
		Лог.Ошибка("Не найден корневой каталог проектов %1", Команда.ЗначениеАргумента("WORKDIR"));
		БылиОшибки = Истина;
	КонецЕсли;

	Проекты = Команда.ЗначениеАргумента("PROJECTS");

	Для Каждого Проект Из Проекты Цикл

		ДиректорияПроекта = Новый Файл(ОбъединитьПути(Команда.ЗначениеАргумента("WORKDIR"), Проект));

		Если НЕ (ДиректорияПроекта.Существует() И ДиректорияПроекта.ЭтоКаталог()) Тогда
			Лог.Ошибка("Не найден корневой каталог проекта %1 в %2", Проект, Команда.ЗначениеАргумента("WORKDIR"));
			БылиОшибки = Истина;
		КонецЕсли;

	КонецЦикла;

	Если БылиОшибки Тогда
		ВызватьИсключение "Продолжение работы невозможно";
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьКоманду(Знач Команда) Экспорт

	ФайлДляОбработки	= Команда.ЗначениеАргумента("PATH");
	Репозиторий			= Команда.ЗначениеАргумента("WORKDIR");
	Проекты				= Команда.ЗначениеАргумента("PROJECTS");
	ФайлРезультата		= Команда.ЗначениеАргумента("OUT");
	ПутиКакВЛинукс		= Команда.ЗначениеОпции("nixPath");

	Парсер = ПарсерОшибок.ПолучитьОбъект();

	// Запись и дополнение контекста
	Парсер.Прочитать(ФайлДляОбработки, Репозиторий, Проекты, ФайлРезультата, ПутиКакВЛинукс);

	// Запись ошибок правил
	Если ПараметрыПриложения.ПолучитьРежимЗаписиОшибокПравил() И Парсер.ПроверитьНаличиеОшибокПравил() Тогда
		КонтекстОшибок = ПараметрыПриложения.ПолучитьКонтекстОшибок();
		ФайловыеОперации.ЗаписатьОбъект(КонтекстОшибок, Парсер.ПолучитьОшибкиПравил());
		Лог.Информация("Записан файл ошибок %1", КонтекстОшибок);
	КонецЕсли;

	// Отправка измененых файлов на удаленный узел
	ЗагрузчикПравил = ПараметрыПриложения.ПолучитьЗагрузчикПравил(Ложь);
	Если ЗначениеЗаполнено(ЗагрузчикПравил) Тогда
		// Отправка файла правил
		ЗагрузчикПравил.ОтправитьПравилаНаУдаленныйУзел(Истина);
		// Отправка файла ошибок правил
		ЗагрузчикПравил.ОтправитьОшибкиПравилНаУдаленныйУзел(Истина);
	КонецЕсли;
	Лог.Информация("Команда выполнена");

КонецПроцедуры
