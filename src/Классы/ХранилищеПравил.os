#Использовать fs

#Область ОписаниеПеременных

Перем Правила; // Хранилище правил

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Ищет в коллекции правил элемент по имени правила
//
// Параметры:
//   Код - Строка - Код правила - нормализованная строка пригодная быть в качестве кода либо сам код из ЕДТ  
//
//  Возвращаемое значение:
//   Структура - Структура с описанием правила (подробнее см НовыйПравило)
//
Функция НайтиПоКоду (Код) Экспорт
	
	Возврат Правила.ПоКоду.Получить(Код);

КонецФункции

// Считает количество добавленных правил
//
//  Возвращаемое значение:
//   Число - количество правил, сохраненных в файле с описанием правил
//
Функция Количество() Экспорт

	Возврат Правила.ПоКоду.Количество();

КонецФункции

// Добавляет новые правила в хранилище правил
//
// Параметры:
//   МассивДобавлений - <Массив> - Массив с новыми правилами, которые будут записаны в итоговый файл
//
Процедура Дополнить(МассивДобавлений) Экспорт

	Объект = ПравилаКакОбъект();

	Для Каждого Добавление Из МассивДобавлений Цикл

		Объект.Rules.Добавить(Добавление.Значение);

	КонецЦикла;

	ФайловыеОперации.ЗаписатьОбъект(ПараметрыПриложения.ПолучитьКонтекст(), Объект);

КонецПроцедуры

// Обрабатывает хранилище правил во внутреннем формате и создает файл, пригодный для экспорта в SQ
//
// Параметры:
//   Путь - Строка - Путь к файлу результата.
//
Процедура Опубликовать(Путь) Экспорт

	Объект = ПравилаКакОбъект();

	Для Каждого Правило Из Объект.Rules Цикл
		// InternalCode используется для внутреннего сопоставления и для SQ будет являться лишним атрибутом
		Правило.Удалить("InternalCode");

		НормализованноеИмя = НормализоватьИмяПравила(Правило.Name);

		Если НормализованноеИмя <> Правило.Name Тогда

			Правило.Description = Правило.Name;

		КонецЕсли;

		Правило.Name = НормализованноеИмя;

	КонецЦикла;

	КорректныйПуть = ФайловыеОперации.ПолучитьКорректныйПутьФайла(Путь);
	АбсолютныйПуть = ФС.ПолныйПуть(КорректныйПуть);

	ФайловыеОперации.ЗаписатьОбъект(АбсолютныйПуть, Объект);

	ПараметрыПриложения.Лог().Информация("Опубликован файл результата: %1", АбсолютныйПуть);

КонецПроцедуры

// Создает базовое описание нового правила по замечанию, которое нашло ЕДТ.
//
// Параметры:
//   ВнутреннийКод - Строка - Код из ЕДТ или нормализованное имя правила
//   Имя - Строка - Имя правила
//   Тип - ТипыЗамечаний - Тип замечания (см ТипыЗамечаний)
//   Критичность - КритичностьЗамечаний- Критичность замечания (см КритичностьЗамечаний)
//
//  Возвращаемое значение:
//   Структура- Описание нового правила
//
Функция НовыйПравило(ВнутреннийКод, Имя, Тип, Критичность) Экспорт
	
	Правило = Новый Структура;
	Правило.Вставить("Code", "");
	Правило.Вставить("InternalCode", ВнутреннийКод);
	Правило.Вставить("Name", Имя);
	Правило.Вставить("Description", "Отсутствует");
	Правило.Вставить("Type", Тип);
	Правило.Вставить("Severity", Критичность);
	Правило.Вставить("Active", true);
	Правило.Вставить("EffortMinutes", 3);

	Возврат Правило;
	
КонецФункции

// Приводит имя правила к каноническому виду
//
// Параметры:
//   Имя - Строка - Код из ЕДТ или нормализованное имя правила
//
//  Возвращаемое значение:
//   Строка - Имя правила, пригодное для экспорта в SQ
//
Функция НормализоватьИмяПравила(Знач Имя) Экспорт

	// На SQ ограничение 200 - но мы смотрим просто что оно очень длинное 
	МаксимальнаяДлина = ПолучитьМаксимальнуюДлинуИмениПравила();

	Если СтрДлина(Имя) > МаксимальнаяДлина Тогда

		ЧастиИмени = СтрРазделить(Имя, ".", Ложь);
		
		Если СтрДлина(ЧастиИмени[0]) > МаксимальнаяДлина Тогда

			Имя = Лев(ЧастиИмени[0], МаксимальнаяДлина - 1 );
		
		Иначе
		
			Имя = ЧастиИмени[0] + ".";
		
		КонецЕсли;

	КонецЕсли;

	Возврат Имя;
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает максимальную длину имени правила
// * У SonarQube есть ограничение по длине имени правила, равное 200 символов
// * Поэтому вводим доп. ограничение, чуть меньше, чем ограничение SonarQube
//
// Возвращаемое значение:
//   Целое - длина имени правила
//
Функция ПолучитьМаксимальнуюДлинуИмениПравила() Экспорт
	МаксимальнаяДлиннаИмениПравила = 150;
	Возврат МаксимальнаяДлиннаИмениПравила;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


Функция ПравилаКакОбъект()
	Возврат ФайловыеОперации.ПрочитатьОбъект(ПараметрыПриложения.ПолучитьКонтекст(), Ложь);
КонецФункции

Процедура ПриСозданииОбъекта()
	
	Объект = ПравилаКакОбъект();
	ПоКоду = Новый Соответствие();

	Для Каждого Правило Из Объект.Rules Цикл
		ПоКоду.Вставить(Правило.InternalCode, Правило);
	КонецЦикла;

	Правила =  Новый Структура("ПоКоду", ПоКоду);

КонецПроцедуры


#КонецОбласти

