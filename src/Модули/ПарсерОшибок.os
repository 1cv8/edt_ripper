#Использовать fs

#Область ОписаниеПеременных

Перем КешПрочитанныхФайлов; // Кеш прочитанных файлов
Перем Лог; // Переменная для хранения логов
Перем ОшибкиПравил; // Массив ошибок, возникающих в процессе парсинга
#КонецОбласти

#Область ПрограммныйИнтерфейс

// Разбирает отчет из ЕДТ и формирует отчет в формате bsl ls
//
// Параметры:
//   Файл - Строка - Путь к файлу, результату работы ЕДТ
//   ПутьКРепозиторию - Строка - Путь к репозиторию с проектами
//   СписокПроектов - Массив - Список проектов в репозитории
//   ФайлРезультата - Строка - Файл, куда будет записан отчет
//   ПутиКакВЛинукс - Строка - Использовать пути как в линукс в отчете
//
Процедура Прочитать(Файл, ПутьКРепозиторию, СписокПроектов, ФайлРезультата, ПутиКакВЛинукс) Экспорт

	Чтение = Новый ЧтениеТекста();
	Чтение.Открыть(Файл, "UTF-8", , , Ложь);

	ПрочитаннаяСтрока = Чтение.ПрочитатьСтроку();
	Отчет = Новый ГенераторОтчетовBSL();

	ВыражениеУбратьКавычки  = Новый РегулярноеВыражение("(\s*[:\[][\S\s]+)");
	ВыражениеУбратьКавычки2  = Новый РегулярноеВыражение("(\s\([\S\s]+?\))");
	ВыражениеУбратьКавычки3  = Новый РегулярноеВыражение("(\s*(?>""'|[""'])[\S\s]*?(?>'""|['""]))");

	МассивДобавлений = Новый Соответствие;
	ХранилищеПравил = Новый ХранилищеПравил;

	// проверка EDT могла быть запущена по мультипроектам с одним файлом результата(напр. конфа + расширения)
	ГенераторыПутей = ИнициализироватьГенераторы(ПутьКРепозиторию, СписокПроектов);
	
	// найденные ошибки
	ОшибкиПравил = Новый Массив;

	НомерСтроки = 0;
	Пока ПрочитаннаяСтрока <> Неопределено Цикл
		НомерСтроки = НомерСтроки + 1;

		СыроеЗамечание = РазобратьЗамечаниеВСтруктуру(ПрочитаннаяСтрока);

		Если ДолженПропуститьСтроку(СыроеЗамечание) Тогда
			ПрочитаннаяСтрока = Чтение.ПрочитатьСтроку();
			Продолжить;
		КонецЕсли;

		ГенераторПутей = ГенераторыПутей.Получить(СыроеЗамечание.Проект);

		Если ГенераторПутей = Неопределено Тогда
			//Выкинуть в лог?
			ВызватьИсключение "Неизвестный проект " + СыроеЗамечание.Проект + ". Невозможно подобрать путь";
		КонецЕсли;

		Позиция = НайтиПозициюВСтрокеЗамечания(СыроеЗамечание.Позиция);

		МетаданныеЗамечания = "";
		ЗамечаниеПеренесено = Ложь;

		Если Позиция = Неопределено Тогда // это не модуль

			МетаданныеЗамечания = Конфигурация.ПодобратьМодуль(ГенераторПутей, СыроеЗамечание.Объект);
			ЗамечаниеПеренесено = Истина;

		Иначе
			МетаданныеЗамечания = СыроеЗамечание.Объект;
		КонецЕсли;

		ОбъектЗамечания = Конфигурация.НормализованныйПутьКОбъектуКонфигурации(ГенераторПутей, МетаданныеЗамечания, ПутиКакВЛинукс);

		Если ПустаяСтрока(ОбъектЗамечания) Тогда
			Лог.Предупреждение("Не удалось найти объект 1С по исходникам - %1", МетаданныеЗамечания);
			ПрочитаннаяСтрока = Чтение.ПрочитатьСтроку();
			Продолжить;
		КонецЕсли;

		Если ЗамечаниеПеренесено Тогда
			Позиция = ПолучитьЗначимуюСтроку(ОбъектЗамечания);
		КонецЕсли;

		Замечание = Отчет.НовыйЗамечаниеДляОбъекта(ОбъектЗамечания);

		//Описание замечания берется из выхлопа EDT
		Замечание.message = ?(ЗамечаниеПеренесено, СыроеЗамечание.РасширенноеСообщение, СыроеЗамечание.Сообщение);

		// Диапазон срабатывания - позиция вычисленная ранее
		Замечание.range.start.line = Позиция - 1;
		Замечание.range.start.character = 0;
		Замечание.range.end.line = Позиция - 1;
		Замечание.range.end.character = 1;

		// Определение кода события. Изначально если присутствует берется из EDT.
		// Отсутствующий код берется из файла правил сонар.
		КодПравила = СыроеЗамечание.Код;

		Имя = ВыражениеУбратьКавычки.Заменить(СыроеЗамечание.Сообщение, "");
		Имя = ВыражениеУбратьКавычки3.Заменить(Имя, "");
		Имя = СокрЛП(ВыражениеУбратьКавычки2.Заменить(Имя, ""));
		
		НайденыСпецСимволы = ПроверитьНаличиеСимволовВСтроке(ПрочитаннаяСтрока, "@", Ложь);
		Если НайденыСпецСимволы Тогда
			ШаблонСообщенияОшибки = "Строка замечания содержит недопустимые символы (файл: %1, строка: %2, код: %3)";
			Лог.Ошибка(ШаблонСообщенияОшибки, Файл, НомерСтроки, КодПравила);
			ОшибкиПравил.Добавить(ПолучитьСтруктуруОшибки(КодПравила, ПрочитаннаяСтрока));
			ПрочитаннаяСтрока = Чтение.ПрочитатьСтроку();
			Продолжить;
		КонецЕсли;

		Код = НайтиСоздатьПравило(ХранилищеПравил, КодПравила, Имя, СыроеЗамечание.Тип, СыроеЗамечание, МассивДобавлений);

		Замечание.code = Код;

		ПрочитаннаяСтрока = Чтение.ПрочитатьСтроку();
	КонецЦикла;
	Чтение.Закрыть();

	Добавлено =  МассивДобавлений.Количество();
	Если Добавлено Тогда
		ХранилищеПравил.Дополнить(МассивДобавлений);
	КонецЕсли;
	
	ФайловыеОперации.СоздатьСтруктуруКаталоговФайла(ФайлРезультата);
	Отчет.ЗаписатьОтчет(ФайлРезультата);

КонецПроцедуры

#КонецОбласти
#Область СлужебныйПрограммныйИнтерфейс

// Возвращает объект
//
// Возвращаемое значение:
//   ПарсерОшибок - парсер ошибок
//
Функция ПолучитьОбъект() Экспорт
	Возврат ЭтотОбъект;
КонецФункции


// Получает коллекцию с ошибками правил
//
// Возвращаемое значение:
//   Массив - ошибки правил
//
Функция ПолучитьОшибкиПравил() Экспорт
	Возврат ОшибкиПравил;
КонецФункции

// Проверяет наличие ошибок правил в коллекции
//
// Возвращаемое значение:
//   Булево - Истина, если в коллекции присутствуют ошибки, иначе - Ложь
//
Функция ПроверитьНаличиеОшибокПравил() Экспорт
	Возврат ЗначениеЗаполнено(ОшибкиПравил) И ОшибкиПравил.Количество() > 0;
КонецФункции


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НайтиСоздатьПравило(ХранилищеПравил, КодПравила, Имя, Тип, Важность, МассивДобавлений)

	СтрокаПоиска = "";
	Если ЗначениеЗаполнено(КодПравила) Тогда
		СтрокаПоиска = КодПравила;
	Иначе
		СтрокаПоиска = Имя;
	КонецЕсли;

	Правило = ХранилищеПравил.НайтиПоКоду(СтрокаПоиска);

	ПравилоОтсутствуетВХранилище = Правило = Неопределено;
	НовоеПравило = МассивДобавлений.Получить(СтрокаПоиска);

	Если НовоеПравило <> Неопределено Тогда

		Возврат НовоеПравило.Code;

	ИначеЕсли ПравилоОтсутствуетВХранилище Тогда

		ТипПравила = ТипыЗамечаний.Определить(Тип);
		ВажностьПравила = КритичностьЗамечаний.Определить(Важность);

		НовоеПравило = ХранилищеПравил.НовыйПравило(СтрокаПоиска, Имя, ТипПравила, ВажностьПравила);

		НовоеПравило.Code =	"EDT" + "-" + (ХранилищеПравил.Количество() + МассивДобавлений.Количество() + 1);
		МассивДобавлений.Вставить(СтрокаПоиска, НовоеПравило);

		Возврат НовоеПравило.Code;

	Иначе
		Возврат  Правило.Code;
	КонецЕсли;

КонецФункции

Функция ИнициализироватьГенераторы(Репо, Проекты)

	Генераторы = Новый Соответствие();

	Для Каждого ПроектСтрокой Из Проекты Цикл

		Лог.Отладка("Проект %1", ПроектСтрокой);

		Проект  = Новый Проект(ОбъединитьПути(Репо, ПроектСтрокой));
		Лог.Информация("Для проекта %1 использован путь %2", Проект.Имя(), Проект.ПутьИсходников());

		Генераторы.Вставить(Проект.Имя(), Новый Путь1СПоМетаданным(Проект.ПутьИсходников()));
	КонецЦикла;

	Возврат Генераторы;

КонецФункции

Функция НайтиПозициюВСтрокеЗамечания(Позиция)

	НайденаяПозиция = Неопределено;

	Если ЗначениеЗаполнено(Позиция) Тогда

		Попытка
			НайденаяПозиция = Число(СтрЗаменить(Позиция, "строка ", ""));
		Исключение
			Попытка
				НайденаяПозиция = Число(СтрЗаменить(Позиция, "line ", ""));
			Исключение
				НайденаяПозиция = Неопределено;
			КонецПопытки;
		КонецПопытки;
	КонецЕсли;

	Возврат НайденаяПозиция;

КонецФункции

Функция ПолучитьЗначимуюСтроку(ПутьКФайлу)

	Если КешПрочитанныхФайлов.Получить(ПутьКФайлу) = Неопределено Тогда
		ЗначимаяСтрока = ЗначимаяСтрокаФайла(ПутьКФайлу);
		КешПрочитанныхФайлов.Вставить(ПутьКФайлу, ЗначимаяСтрока);
		Возврат ЗначимаяСтрока;
	Иначе
		Возврат КешПрочитанныхФайлов.Получить(ПутьКФайлу);
	КонецЕсли;

КонецФункции

Функция ЗначимаяСтрокаФайла(ПутьКФайлу)
     ЗначимаяСтрока = 0;
	 Текст = Новый ЧтениеТекста();

	 Попытка

		Текст.Открыть(ПутьКФайлу);
	 	Строка = Текст.ПрочитатьСтроку();

	 Пока Строка <> Неопределено Цикл

		Если НЕ ПустаяСтрока(Строка) Тогда
			Прервать;
		КонецЕсли;

		ЗначимаяСтрока = ЗначимаяСтрока + 1;
		Строка = Текст.ПрочитатьСтроку();
	 КонецЦикла;

	Исключение
		Текст.Закрыть();
	КонецПопытки;

	 Текст.Закрыть();

	 ЗначимаяСтрока = ЗначимаяСтрока + 1;

	 Возврат ЗначимаяСтрока;

КонецФункции

Функция РазобратьЗамечаниеВСтруктуру(Строка)

	ОписаниеЗамечания = СтрРазделить(Строка, Символы.Таб, Истина);
	Замечание = Новый Структура;
	Замечание.Вставить("Дата", ОписаниеЗамечания[0]);
	Замечание.Вставить("Важность", ОписаниеЗамечания[1]);
	Замечание.Вставить("Тип", ОписаниеЗамечания[2]);
	Замечание.Вставить("Проект", ОписаниеЗамечания[3]);
	Замечание.Вставить("Код", ОписаниеЗамечания[4]);
	Замечание.Вставить("Объект", ОписаниеЗамечания[5]);
	Замечание.Вставить("Позиция", ОписаниеЗамечания[6]);
	Замечание.Вставить("Сообщение", ОписаниеЗамечания[7]);
	Замечание.Вставить("РасширенноеСообщение", ОписаниеЗамечания[5] + "->" + ОписаниеЗамечания[7]);

	Возврат Замечание;

КонецФункции

Функция ДолженПропуститьСтроку(СыроеЗамечание) 
	Пропуск = Ложь;

	Если (СтрНайти(СыроеЗамечание.Объект, "/.settings/") ИЛИ СтрНачинаетсяС(СыроеЗамечание.Сообщение, "[BSL LS]")) Тогда
		Пропуск = Истина;
	КонецЕсли;

	Возврат Пропуск;

КонецФункции

// Готовит структуру для записи ошибки в коллекцию
//
// Параметры:
//   Код - Строка - код правила
//   СтрокаОшибки - Строка - исходная строка содержащая ошибку
//
// Возвращаемое значение:
//   Структура:
//   * КодПравила - Строка - код ошибки
//   * ИсходнаяСтрока - Строка - строка с ошибкой
//
Функция ПолучитьСтруктуруОшибки(Код, СтрокаОшибки)
	СтруктураОшибки = Новый Структура("КодПравила, ИсходнаяСтрока");
	СтруктураОшибки.КодПравила = Код;
	СтруктураОшибки.ИсходнаяСтрока = СтрокаОшибки;
	Возврат СтруктураОшибки;
КонецФункции

// Выполняет поиск в строке указанных символов
//
// Параметры:
//   ПроверяемаяСтрока - Строка - проверяемая строка
//   СтрокаСпецСимволов - Строка - строка со спец. символами, например: "$@%"
//   ИспользоватьРегулярноеВыражение - Булево - если "Истина" - поиск символов
//   в строке будет выполнен с использованием функции "РегулярноеВыражение.НайтиСовпадения()".
//   В ином случае поиск символов будет выполняться с использованием функции "СтрНайти()"
//
// Возвращаемое значение:
//   Булево - Истина, если символы в строке были найдены, иначе - Ложь
//
Функция ПроверитьНаличиеСимволовВСтроке(ПроверяемаяСтрока, СтрокаСпецСимволов, ИспользоватьРегулярноеВыражение = Ложь)
	Паттерн = "";
	СимволыНайденыВСтроке = Ложь;
	Если ИспользоватьРегулярноеВыражение Тогда
		Для Индекс = 1 По СтрДлина(СтрокаСпецСимволов) Цикл
			СпецСимвол = Сред(СтрокаСпецСимволов, Индекс, 1);
			Если Не ЗначениеЗаполнено(Паттерн) Тогда
				Паттерн = СтрШаблон("\%1", СпецСимвол);
				Продолжить;
			КонецЕсли;
			Паттерн = СтрШаблон("%1|\%2", Паттерн, СпецСимвол);
		КонецЦикла;
		ВыражениеНайтиНедопустимыеСимволы = Новый РегулярноеВыражение(СтрШаблон(".*(%1).*", Паттерн));
		КоллекцияГруппСовпадений = ВыражениеНайтиНедопустимыеСимволы.НайтиСовпадения(ПроверяемаяСтрока);
		СимволыНайденыВСтроке = КоллекцияГруппСовпадений.Количество() > 0;
	Иначе
		СимволыНайденыВСтроке = СтрНайти(ПроверяемаяСтрока, СтрокаСпецСимволов) > 0;
	КонецЕсли;

	Возврат СимволыНайденыВСтроке;
КонецФункции



#КонецОбласти

КешПрочитанныхФайлов = Новый Соответствие();
Лог = ПараметрыПриложения.Лог();
