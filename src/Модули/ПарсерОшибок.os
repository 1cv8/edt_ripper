#Область ОписаниеПеременных

Перем КешПрочитанныхФайлов;
Перем Лог;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Разбирает отчет из ЕДТ и формирует отчет в формате bsl ls
//
// Параметры:
//   Файл - Строка - Путь к файлу, результату работы ЕДТ
//   ПутьКРепозиторию - Строка - Путь к репозиторию с проектами
//   СписокПроектов - Массив - Список проектов в репозитории
//   ФайлРезультата - Строка - Файл, куда будет записан отчет
//   ПутиКакВЛинукс - Строка - Использовать пути как в линукс в отчете
//
Процедура Прочитать(Файл, ПутьКРепозиторию, СписокПроектов, ФайлРезультата, ПутиКакВЛинукс) Экспорт

	Чтение = Новый ЧтениеТекста;
	Чтение.Открыть(Файл, "UTF-8", , , Ложь);

	Строка = Чтение.ПрочитатьСтроку();
	Отчет = Новый ГенераторОтчетовBSL();

	ВыражениеУбратьКавычки  = Новый РегулярноеВыражение("(\s*[:\[][\S\s]+)");
	ВыражениеУбратьКавычки2  = Новый РегулярноеВыражение("(\s\([\S\s]+?\))");
	ВыражениеУбратьКавычки3  = Новый РегулярноеВыражение("(\s*(?>""'|[""'])[\S\s]*?(?>'""|['""]))");

	МассивДобавлений = Новый Соответствие;
	ХранилищеПравил = Новый ХранилищеПравил;

	// проверка EDT могла быть запущена по мультипроектам с одним файлом результата(напр. конфа + расширения)
	ГенераторыПутей = ИнициализироватьГенераторы(ПутьКРепозиторию, СписокПроектов);

	Пока Строка <> Неопределено Цикл
          
		СыроеЗамечание = РазобратьЗамечаниеВСтруктуру(Строка);

		Если СтрНачинаетсяС(СыроеЗамечание.Сообщение, "[BSL LS]") Тогда
			Строка = Чтение.ПрочитатьСтроку();
			Продолжить;
		КонецЕсли;

		ГенераторПутей = ГенераторыПутей.Получить(СыроеЗамечание.Проект);

		Если ГенераторПутей = Неопределено Тогда
			//Выкинуть в лог?
			ВызватьИсключение "Неизвестный проект " + СыроеЗамечание.Проект + "Невозможно подобрать путь";
		КонецЕсли;

		Позиция = НайтиПозициюВСтрокеЗамечания(СыроеЗамечание.Позиция);

		МетаданныеЗамечания = "";
		ЗамечаниеПеренесено = Ложь;

		Если Позиция = Неопределено Тогда // это не модуль
			
			МетаданныеЗамечания = Конфигурация.ПодобратьМодуль(ГенераторПутей, СыроеЗамечание.Объект);
			ЗамечаниеПеренесено = Истина;

		Иначе
			МетаданныеЗамечания = СыроеЗамечание.Объект;
		КонецЕсли;

		ОбъектЗамечания = Конфигурация.НормализованныйПутьКОбъектуКонфигурации(ГенераторПутей, МетаданныеЗамечания, ПутиКакВЛинукс);

		Если ЗамечаниеПеренесено Тогда
			Позиция = ПолучитьЗначимуюСтроку(ОбъектЗамечания);
		КонецЕсли;

		Замечание = Отчет.НовыйЗамечаниеДляОбъекта(ОбъектЗамечания);
		
		//Описание замечания берется из выхлопа EDT
		Замечание.message = ?(ЗамечаниеПеренесено, СыроеЗамечание.РасширенноеСообщение, СыроеЗамечание.Сообщение);
		
		// Диапазон срабатывания - позиция вычисленная ранее
		Замечание.range.start.line = Позиция - 1;
		Замечание.range.start.character = 0;
		Замечание.range.end.line = Позиция - 1;
		Замечание.range.end.character = 1;

		// Определение кода события. Изначально если присутствует берется из EDT. 
		// Отсутствующий код берется из файла правил сонар. 
		КодПравила = СыроеЗамечание.Код;

		Имя = ВыражениеУбратьКавычки.Заменить(СыроеЗамечание.Сообщение, "");
		Имя = ВыражениеУбратьКавычки3.Заменить(Имя, "");
		Имя = СокрЛП(ВыражениеУбратьКавычки2.Заменить(Имя, ""));;

		Код = НайтиСоздатьПравило(ХранилищеПравил, КодПравила, Имя,СыроеЗамечание.Тип, СыроеЗамечание, МассивДобавлений);
		
		Замечание.code = Код;

		Строка = Чтение.ПрочитатьСтроку();
	КонецЦикла;
	Чтение.Закрыть();

	Добавлено =  МассивДобавлений.Количество();
	Если Добавлено Тогда
		ХранилищеПравил.Дополнить(МассивДобавлений);
	КонецЕсли;

	Отчет.ЗаписатьОтчет(ФайлРезультата);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НайтиСоздатьПравило(ХранилищеПравил, КодПравила, Имя, Тип, Важность, МассивДобавлений)

	СтрокаПоиска = "";
	Если ЗначениеЗаполнено(КодПравила) Тогда
		СтрокаПоиска = КодПравила;
	Иначе
		СтрокаПоиска = Имя;
	КонецЕсли;
	
	Правило = ХранилищеПравил.НайтиПоКоду(СтрокаПоиска);

	ПравилоОтсутствуетВХранилище = Правило = Неопределено;
	НовоеПравило = МассивДобавлений.Получить(СтрокаПоиска);

	Если НовоеПравило <> Неопределено Тогда

		Возврат НовоеПравило.Code;

	ИначеЕсли ПравилоОтсутствуетВХранилище Тогда
		
		НовоеПравило = ХранилищеПравил.НовыйПравило(СтрокаПоиска, Имя, ТипыЗамечаний.Определить(Тип), КритичностьЗамечаний.Определить(Важность));
		НовоеПравило.Code =	"EDT" + "-" + (ХранилищеПравил.Количество() + МассивДобавлений.Количество() + 1);
		МассивДобавлений.Вставить(СтрокаПоиска, НовоеПравило);
		
		Возврат НовоеПравило.Code;

	Иначе
		Возврат  Правило.Code;
	КонецЕсли;

КонецФункции

Функция ИнициализироватьГенераторы(Репо, Проекты)

	Генераторы = Новый Соответствие();

	Для Каждого Проект Из Проекты Цикл

		Путь = ОбъединитьПути(Репо, Проект, "src");
		ПараметрыПриложения.Лог().Отладка("Использован путь проекта %1", Путь);
		Генераторы.Вставить(Проект, Новый Путь1СПоМетаданным(Путь));
	КонецЦикла;

	Возврат Генераторы;
	
КонецФункции

Функция НайтиПозициюВСтрокеЗамечания(Позиция)

	НайденаяПозиция = Неопределено;

	Если ЗначениеЗаполнено(Позиция) Тогда
			
		Попытка
			НайденаяПозиция =  Число(СтрЗаменить(Позиция, "строка ", ""));
		Исключение
			Попытка
				НайденаяПозиция =  Число(СтрЗаменить(Позиция, "line ", ""));
			Исключение
				НайденаяПозиция = Неопределено;
			КонецПопытки;
		КонецПопытки;
	КонецЕсли;

	Возврат НайденаяПозиция;

КонецФункции

Функция ПолучитьЗначимуюСтроку(ПутьКФайлу)

	Если КешПрочитанныхФайлов.Получить(ПутьКФайлу) = Неопределено Тогда
		ЗначимаяСтрока = ЗначимаяСтрокаФайла(ПутьКФайлу);
		КешПрочитанныхФайлов.Вставить(ПутьКФайлу, ЗначимаяСтрока);
		Возврат ЗначимаяСтрока;
	Иначе;
		Возврат КешПрочитанныхФайлов.Получить(ПутьКФайлу)
	КонецЕсли;
	
КонецФункции

Функция ЗначимаяСтрокаФайла(ПутьКФайлу)
     ЗначимаяСтрока = 0;
	 Текст = Новый ЧтениеТекста();

	 Попытка

		Текст.Открыть(ПутьКФайлу);
	 	Строка = Текст.ПрочитатьСтроку();

	 Пока Строка <> Неопределено Цикл
	 
		Если НЕ ПустаяСтрока(Строка) Тогда
			Прервать;
		КонецЕсли;

		ЗначимаяСтрока = ЗначимаяСтрока + 1;
		Строка = Текст.ПрочитатьСтроку();
	 КонецЦикла;
	 
	Исключение
		Текст.Закрыть();
	КонецПопытки;
	 
	 Текст.Закрыть();

	 ЗначимаяСтрока = ЗначимаяСтрока + 1;
	
	 Возврат ЗначимаяСтрока;

КонецФункции

Функция РазобратьЗамечаниеВСтруктуру(Строка)

	ОписаниеЗамечания = СтрРазделить(Строка, Символы.Таб, Истина);
	Замечание = Новый Структура;
	Замечание.Вставить("Дата", ОписаниеЗамечания[0]);
	Замечание.Вставить("Важность", ОписаниеЗамечания[1]);
	Замечание.Вставить("Тип", ОписаниеЗамечания[2]);
	Замечание.Вставить("Проект", ОписаниеЗамечания[3]);
	Замечание.Вставить("Код", ОписаниеЗамечания[4]);
	Замечание.Вставить("Объект", ОписаниеЗамечания[5]);
	Замечание.Вставить("Позиция", ОписаниеЗамечания[6]);
	Замечание.Вставить("Сообщение", ОписаниеЗамечания[7]);
	Замечание.Вставить("РасширенноеСообщение", ОписаниеЗамечания[5] + "->" + ОписаниеЗамечания[7]);

	Возврат Замечание;

КонецФункции;

#КонецОбласти

КешПрочитанныхФайлов = Новый Соответствие();
Лог = ПараметрыПриложения.Лог();
