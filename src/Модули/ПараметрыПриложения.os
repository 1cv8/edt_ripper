#Использовать logos

#Область ОписаниеПеременных
 
Перем Лог;

Перем Контекст;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Возвращает объект лог для фиксации сообщений
//
//  Возвращаемое значение:
//   logos.Лог - объект типа
//
Функция Лог() Экспорт
	
	Если Лог = Неопределено Тогда
		Лог = Логирование.ПолучитьЛог(ИмяЛогаПриложения());
	КонецЕсли;
	
	Возврат Лог;
	
КонецФункции

// Устанавливает место, откуда будут читаться старые замечания и записываться новые.
//
// Параметры:
//   ПутьКФайлу - Строка - Путь к внешнему файлу правил
//
Процедура УстановитьКонтекстСохранения(Знач ПутьКФайлу) Экспорт
	
	Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
		 Контекст = ПутьКФайлу;

	Иначе
		 Контекст = ЛокальныйКонтекст();
	КонецЕсли;

	Лог().Информация("Установлен контекст сохранения замечаний %1", Контекст);

КонецПроцедуры

// Устанавливает способ сохранения замечаний и возвращает выбранный контекст 
//
//  Возвращаемое значение:
//   Строка - контекст для работы с сохранением правил
//
Функция ПолучитьКонтекст() Экспорт
	
	Если Контекст = Неопределено Тогда
		УстановитьКонтекстСохранения(Неопределено);
	КонецЕсли;

	Возврат  Контекст;

КонецФункции

// Путь к локальному файлу с сохраненными правилами
//
//  Возвращаемое значение:
//   Строка - Путь к файлу
//
Функция ЛокальныйКонтекст() Экспорт
	
	Возврат ОбъединитьПути(ТекущийСценарий().Каталог, "../..", "custom-rules.json");

КонецФункции

// Возвращает имя лога приложения
//
//  Возвращаемое значение:
//   Строка - Имя лога
//
Функция ИмяЛогаПриложения() Экспорт
	Возврат "oscript.app." + ИмяПриложения();
КонецФункции

// Возвращает имя приложения
//
//  Возвращаемое значение:
//   Строка - Имя приложения
//
Функция ИмяПриложения() Экспорт
	
	Возврат "edt-ripper";
	
КонецФункции

// Версия приложения
//
//  Возвращаемое значение:
//   Строка - Строка с версией приложения
//
Функция Версия() Экспорт
	
	Возврат "0.7";
	
КонецФункции

// Устанавливает режим отладки для логирования приложения
//
// Параметры:
//   РежимОтладки - Булево - Если Истина отладка включается, если ложь - выключается
//
Процедура УстановитьРежимОтладки(Знач РежимОтладки) Экспорт
	
	Если РежимОтладки Тогда
		
		Лог().УстановитьУровень(УровниЛога.Отладка);
		Лог.Отладка("Установлен уровень логов ОТЛАДКА");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
