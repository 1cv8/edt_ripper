#Использовать "."
#Использовать cli

Перем Лог; // Переменная для хранения логов
Перем ЗагрузчикПравил; // Экземпляр класса загрузчика правил

Процедура ВыполнитьПриложение()

	Приложение = Новый КонсольноеПриложение(ПараметрыПриложения.ИмяПриложения(),
			"Приложение для работы с файлами ошибок статических анализаторов",
			ЭтотОбъект);
	
	Приложение.Версия("version", ПараметрыПриложения.Версия());

	Приложение.Опция("v verbose", Ложь, "Вывод отладочной информация в процессе выполнения")
	.Флаговый().ВОкружении("EDT_RIPPER_VERBOSE");
	
	Приложение.Опция("f file", "", "Путь к внешнему файлу-коллектору замечаний")
	.ТСтрока().ВОкружении("EDT_RIPPER_RULES_FILE");

	Приложение.Опция("export-rule-errors", "", "Экспорт ошибок возникающих при проверке замечаний по указанным правилам")
	.Флаговый().ВОкружении("EDT_RIPPER_EXPORT_RULES_ERRORS");	

	Приложение.Опция("nexus-rules-url", "", "URL-адрес внешнего файла-коллектора замечаний
	|                                (если используется, то чтение файла по флагу '-f/--file' - игнорируется)")
	.ТСтрока().ВОкружении("EDT_RIPPER_NEXUS_RULES_URL");

	Приложение.Опция("nexus-auth-username", "", "Имя пользователя для при получении файла-коллектора замечаний")
	.ТСтрока().ВОкружении("EDT_RIPPER_NEXUS_AUTH_USERNAME");

	Приложение.Опция("nexus-auth-password", "",
	"Пароль пользователя для аутентификации при получении файла-коллектора замечаний")
	.ТСтрока().ВОкружении("EDT_RIPPER_NEXUS_AUTH_PASSWORD");

	Приложение.ДобавитьКоманду("parse", "Создание отчета", Новый КомандаПарсерОтчетаЕДТ);
	Приложение.ДобавитьКоманду("publish", "Удаление из выбранного файла правил служебных блоков,
	|                результирующий файл готов для загрузки в сонар", Новый КомандаПубликацияПравил);

	Приложение.Запустить(АргументыКоманднойСтроки);
	
КонецПроцедуры

Процедура ПередВыполнениемКоманды(Знач Команда) Экспорт

	ОтладкаВключена = Команда.ЗначениеОпции("verbose");
	ПараметрыПриложения.УстановитьРежимОтладки(ОтладкаВключена);

	ЗаписыватьОшибкиПравил = Команда.ЗначениеОпции("export-rule-errors") = Истина;
	ПараметрыПриложения.УстановитьРежимЗаписиОшибокПравил(ЗаписыватьОшибкиПравил);

	ПолныйАдресРесурса = Команда.ЗначениеОпции("nexus-rules-url");
	ПутьВнешнегоФайлаОписаний = Команда.ЗначениеОпции("file");
	
	НеЗаданыОсновныеПараметры =
		НЕ ЗначениеЗаполнено(ПолныйАдресРесурса) И НЕ ЗначениеЗаполнено(ПутьВнешнегоФайлаОписаний);
	
	Если НеЗаданыОсновныеПараметры Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ПолныйАдресРесурса) Тогда
		
		Логин = Команда.ЗначениеОпции("nexus-auth-username");
		Пароль = Команда.ЗначениеОпции("nexus-auth-password");
		Токен = ""; // TODO: При необходимости

		ЗагрузчикПравил = ПараметрыПриложения
		.ПолучитьЗагрузчикПравил()
		.Инициализировать(ПолныйАдресРесурса, Логин, Пароль, Токен)
		.УстановитьЛокальныйКонтекстСохранения()
		.УстановитьЛокальныйКонтекстСохраненияОшибок()
		.ЗагрузитьПравилаИзКонтекстаНаУдаленныйУзелПриОтсутствии()
		.ЗагрузитьОшибкиПравилИзКонтекстаНаУдаленныйУзелПриОтсутствии()
		.ПереопределитьКонтекстСохранения("./.rules/custom-rules.json")
		.ПереопределитьКонтекстСохраненияОшибок("./.rules/custom-rules-errors.json")
		.ПолучитьПравилаСУдаленногоУзла()
		.ПолучитьОшибкиПравилСУдаленногоУзла()
		.ЗаписатьПравилаВФайл()
		.ЗаписатьОшибкиПравилВФайл();

		Возврат;

	КонецЕсли;
	
	Если Не ФайловыеОперации.ПроверитьСуществованиеФайла(ПутьВнешнегоФайлаОписаний) Тогда
		ТекстОшибки = 
			?(Не ЗначениеЗаполнено(ПутьВнешнегоФайлаОписаний),
			"Не определен путь до файла правил",
			СтрШаблон("Файл правил недоступен по указанному пути '%1'", СокрЛП(ПутьВнешнегоФайлаОписаний)));

		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	ПараметрыПриложения.УстановитьКонтекстСохранения(ПутьВнешнегоФайлаОписаний);
	ПараметрыПриложения.УстановитьКонтекстСохраненияОшибок("");
	
КонецПроцедуры

Процедура ВыполнитьКоманду(Знач КомандаПриложения) Экспорт
	КомандаПриложения.ВывестиСправку();
КонецПроцедуры

Лог = ПараметрыПриложения.Лог();

Попытка
	
	ВыполнитьПриложение();
	
Исключение
	
	Лог.КритичнаяОшибка(ОписаниеОшибки());
	ЗавершитьРаботу(1);
	
КонецПопытки;
